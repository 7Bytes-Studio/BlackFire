using UnityEngine;
using UnityEditor;

using System;
using System.Collections.Generic;
using System.Linq;

using UnityEngine.AssetGraph;

[CustomPrefabBuilder("MyPrefabBuilder")]
public class MyPrefabBuilder : IPrefabBuilder {

	[SerializeField] private Color color;

    public void OnValidate () {
    }

	/**
		 * Test if prefab can be created with incoming assets.
		 * @result Name of prefab file if prefab can be created. null if not.
		 */
	public string CanCreatePrefab (string groupKey, List<UnityEngine.Object> objects, UnityEngine.GameObject previous) {

		var tex = objects.Find(o => o.GetType() == typeof(UnityEngine.Texture2D));

		if(tex != null) {
			return string.Format("MyPrefab{0}", groupKey);
		}

		return null;
	}

	/**
	 * Create Prefab.
	 */ 
	public UnityEngine.GameObject CreatePrefab (string groupKey, List<UnityEngine.Object> objects, UnityEngine.GameObject previous) {

		GameObject go = new GameObject(string.Format("MyPrefab{0}", groupKey));

		GUITexture t = go.AddComponent<GUITexture>();

		Texture2D tex = (Texture2D)objects.Find(o => o.GetType() == typeof(UnityEngine.Texture2D));

		t.texture = tex;
		t.color = color;

		return go;
	}

	/**
	 * Draw Inspector GUI for this PrefabBuilder.
	 */ 
	public void OnInspectorGUI (Action onValueChanged) {

		EditorGUILayout.HelpBox("This is the inspector of your custom PrefabBuilder. You can customize by implementing OnInspectorGUI().", MessageType.Info);

		var newValue = EditorGUILayout.ColorField("Example", color);
		if(newValue != color) {
			color = newValue;
			onValueChanged();
		}
	}
}
